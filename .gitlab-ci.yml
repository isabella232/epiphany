include: 'https://gitlab.gnome.org/GNOME/citemplates/raw/master/flatpak/flatpak_ci_initiative.yml'

cache:
  paths:
    - _ccache/

variables:
  BUNDLE: 'epiphany-git.flatpak'
  MANIFEST_PATH: 'org.gnome.Epiphany.json'
  RUNTIME_REPO: 'https://nightly.gnome.org/gnome-nightly.flatpakrepo'
  FLATPAK_MODULE: 'epiphany'
  APP_ID: 'org.gnome.Epiphany.Devel'

stages:
  - image
  - check
  - test

update image:
    variables:
         DOCKER_TLS_CERTDIR: ""
    image: docker:latest
    stage: image
    tags:
        - privileged
    services:
        - docker:dind
    script:
        - docker build --tag $CI_REGISTRY_IMAGE .gitlab/
        - docker tag $CI_REGISTRY_IMAGE "$CI_REGISTRY_IMAGE:v$CI_JOB_ID"
        - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
        - docker push $CI_REGISTRY_IMAGE
    when: manual

check-code-style:
  stage: check
  image: registry.gitlab.gnome.org/gnome/epiphany/master:v1
  interruptible: true
  script:
    - bash data/check-code-style
  dependencies:
    - update image

flatpak:
  extends: '.flatpak'
  stage: test
  variables:
    CONFIG_OPTS: '-Dprofile=Devel -Dunit_tests=enabled --werror'
  except:
    - master

flatpak master:
  extends: '.flatpak'
  stage: test
  variables:
    CONFIG_OPTS: '-Dtech_preview=true -Dprofile=Devel'
  only:
    - master

flatpak scanbuild:
  extends: '.flatpak'
  stage: test
  variables:
    CONFIG_OPTS: '-Dprofile=Devel -Dunit_tests=enabled --werror'
  script:
    - flatpak-builder --user --disable-rofiles-fuse --stop-at=${FLATPAK_MODULE} flatpak_app ${MANIFEST_PATH}
    - flatpak build flatpak_app meson --prefix=/app ${CONFIG_OPTS} _build
    - flatpak build flatpak_app ninja -C _build scan-build
    - bash -c 'if [[ -n "$(ls -A _build/meson-logs/scanbuild/)" ]]; then echo "Scan build log found, assuming defects exist"; exit 1; fi'
  artifacts:
    when: on_failure
    paths:
      - _build/meson-logs/scanbuild

nightly:
  extends: '.publish_nightly'
  stage: .post
  dependencies: ['flatpak master']
